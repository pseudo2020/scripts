#!/bin/sh

# 'inpath' verifies a programme - either valid, invalid or that it's not listed in the PATH

in_path() {
	
	# Given a command and the PATH, try to find the command.
	# Returns 0 if found and executable, 1 if not. 
	# Temporarliy modifies the 'input field separator' but restores upon completion

	cmd=$1
	path=$2
	retval=1
	oldIFS=$IFS
	IFS=":"

	for directory in $path
	do
		if [ -x $directory/$cmd ] ; then
			retval=0
		fi
	done
	IFS=$oldIFS
	return $retval
}

check_for_cmd_in_path() {
	var=$1

	# The variable slicing notation in the following conditional needs some explanation:
	# ${var#expr} returns everything after the match for 'expr' in the variable value (if any), 
	# and ${var%expr} returns everything that doesn't match (in this case, just the very first character).
	# You can also do this in Bash with ${var:0:1}, and you could use cut too: cut -c1.

	if [ "$var" != "" ]; then
		if [ "${var%${var#?}}" = "/" ] ; then
			if [ ! -x $var ] ; then
				return 1
			fi
			elif ! in_path $var $PATH ; then
				return 2
		fi
	fi
}

: '
if [ $# -ne 1 ] ; then
	echo "Usage: $0 command">&2 ; exit 1
fi
check_for_cmd_in_path "$1"

case $? in
		0 ) echo "$1 found in PATH"					;;
		1 ) echo "$1 not found or not executable"	;;
		2 ) echo "$1 not found in PATH"				;;
esac

exit 0
'

